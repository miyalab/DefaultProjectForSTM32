/*
 * Copyright (c) 2020 K.Miyauchi
 * This software is released under the MIT LICENSE
 * http://opensource.org/licenses/mit-license.php
 *
 * File  : OSL.h
 * Author: Koshiro Miyauchi
 *
 * Version : 1.00
 */

#ifndef OSL_STM32F446_H_
#define OSL_STM32F446_H_

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// インクルード
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#include <sys/_stdint.h>

//============================================================================================
// Open Source Library
//============================================================================================
namespace OSL{
	//****************************************************************************************
	// MultiAccessクラス (マルチスレッド処理 バグ回避用)
	//****************************************************************************************
	template <typename type> class MultiAccess{
	public:
		MultiAccess();
		MultiAccess(type SetData);
		void Set(type SetData);
		void Add(type Add);
		void Clear();
		type Read();
	private:
		type Data;
	};

	//****************************************************************************************
	// PIDクラス
	//****************************************************************************************
	template <typename type> class PID{
	public:
		PID();
		void Calculation(type SensorVal);
		void SetGain(type _Kp, type _Ki, type _Kd);
		void SetTarget(type Target);
		type Read();
		void Reset();
		void SetLimit(type Limit);

	private:
		type Kp, Ki, Kd;
		type Error, ErrorBefore, ErrorInt;
		type TargetVal;
		type ControlVal;
		type LimitVal;
	};
}

//--------------------------------------------------------------------------------------------
// Open Source Library
// MultiAccessクラス インストラクタ
//--------------------------------------------------------------------------------------------
template <typename type> OSL::MultiAccess<type>::MultiAccess(){Data = 0;}

//--------------------------------------------------------------------------------------------
// Open Source Library
// MultiAccessクラス インストラクタ
// SetData : 格納するデータ
//--------------------------------------------------------------------------------------------
template <typename type> OSL::MultiAccess<type>::MultiAccess(type SetData){Data = SetData;}

//--------------------------------------------------------------------------------------------
// Open Source Library
// MultiAccessクラス Set関数
// SetData : 格納するデータ
//--------------------------------------------------------------------------------------------
template <typename type> void OSL::MultiAccess<type>::Set(type SetData){Data = SetData;}

//--------------------------------------------------------------------------------------------
// Open Source Library
// MultiAccessクラス Add関数
// Add : 加算するデータ
//--------------------------------------------------------------------------------------------
template <typename type> void OSL::MultiAccess<type>::Add(type Add){Data += Add;}

//--------------------------------------------------------------------------------------------
// Open Source Library
// MultiAccessクラス Clear関数
// 格納されているデータを0にする
//--------------------------------------------------------------------------------------------
template <typename type> void OSL::MultiAccess<type>::Clear(){Data = 0;}

//--------------------------------------------------------------------------------------------
// Open Source Library
// MultiAccessクラス Read関数
// return : 格納されているデータ
//--------------------------------------------------------------------------------------------
template <typename type> type OSL::MultiAccess<type>::Read(){return Data;}

//--------------------------------------------------------------------------------------------
// Open Source Library
// MultiAccessクラス インストラクタ
//--------------------------------------------------------------------------------------------
template <typename type> OSL::PID<type>::PID()
{
	SetTarget(0);
	SetGain(0,0,0);
	SetLimit(1);
	Reset();
}

//--------------------------------------------------------------------------------------------
// Open Source Library
// PIDクラス Calculation関数
// SensorVal : フィードバックされるセンサ値
//
// 一定周期で呼び出してください.
//--------------------------------------------------------------------------------------------
template <typename type> void OSL::PID<type>::Calculation(type SensorVal)
{
	type Ret;
	type P, I, D;

	// 偏差計算
	ErrorBefore = Error;				// 前回の偏差を格納
	Error = TargetVal - SensorVal;		// 偏差計算
	ErrorInt += Error;					// 累積偏差

	// PID計算
	P = Kp * Error;						// 比例制御
	I = Ki * ErrorInt;					// 積分制御
	D = Kd * (Error - ErrorBefore);		// 微分制御

	Ret = P + I + D;

	// 操作量上限計算
	if(LimitVal != 0){
		if(Ret >  LimitVal) Ret = LimitVal;
		if(Ret < -LimitVal) Ret = -LimitVal;
	}

	ControlVal = Ret;
}

//--------------------------------------------------------------------------------------------
// Open Source Library
// PIDクラス SetGain関数
// _Kp : 比例ゲイン
// _Ki : 積分ゲイン
// _Kd : 微分ゲイン
//
// 各ゲインを設定します.
//--------------------------------------------------------------------------------------------
template <typename type> void OSL::PID<type>::SetGain(type _Kp, type _Ki, type _Kd)
{
	Kp = _Kp;
	Ki = _Ki;
	Kd = _Kd;
}

//--------------------------------------------------------------------------------------------
// Open Source Library
// PIDクラス SetTarget関数
// Target : 目標値
//
// 目標値を設定します.
//--------------------------------------------------------------------------------------------
template <typename type> void OSL::PID<type>::SetTarget(type Target)
{
	TargetVal = Target;
}

//--------------------------------------------------------------------------------------------
// Open Source Library
// PIDクラス Read関数
// return : 操作量
//--------------------------------------------------------------------------------------------
template <typename type> type OSL::PID<type>::Read()
{
	return ControlVal;
}

//--------------------------------------------------------------------------------------------
// Open Source Library
// PIDクラス Reset関数
//
// すべての偏差を初期化します.
//--------------------------------------------------------------------------------------------
template <typename type> void OSL::PID<type>::Reset()
{
	Error = 0;
	ErrorBefore = 0;
	ErrorInt = 0;
}

//--------------------------------------------------------------------------------------------
// Open Source Library
// PIDクラス SetLimit関数
// Limit : 0（操作量制限なし）
//       : otherwise(操作量制限あり)
//--------------------------------------------------------------------------------------------
template <typename type> void OSL::PID<type>::SetLimit(type Limit)
{
	LimitVal = Limit;
}

#endif /* OSL_STM32F446_H_ */

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// end of file
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
