/*
 * Project    : nucleo64_f446re
 * File       : main.cpp
 *
 * Controller : STM32 Nucleo64-F446RE
 *
 * Date       : 2020/10/19
 * Author     : K.Miyauchi
 */

//--------------------------
// インクルード
//--------------------------
#include <stdio.h>
#include "stm32f4xx.h"

#include "MiYALAB_STM32F446RE.h"
#include "MiYALAB_STM32F446RE_TIM.h"
#include "MiYALAB_STM32F446RE_USART.h"

//--------------------------
// シンボル定義
//--------------------------
#define B1_Pin GPIO_PIN_13
#define B1_GPIO_Port GPIOC
#define LD2_Pin GPIO_PIN_5
#define LD2_GPIO_Port GPIOA

//--------------------------
// グローバル変数宣言
//--------------------------
MiYALAB::MultiAccess<uint32_t> cntDelay;

//--------------------------
// ライブラリモジュール
//--------------------------
MiYALAB::STM32F446RE::TIM6_TimerMode Tim6;
MiYALAB::STM32F446RE::USART2_UartMode Uart2;

//--------------------------
// プロトタイプ宣言
//--------------------------
uint8_t HardwareSetup();
void delay(uint32_t setDelay);

//------------------------------------------------------------------------------
// メイン関数
//------------------------------------------------------------------------------
int main()
{

	// マイコン機能初期化
	HardwareSetup();

	// タイマー設定
	Tim6.Init(9000, 10000);

	// UART設定
	Uart2.Init(9600,UART_WORDLENGTH_8B,UART_STOPBITS_1,UART_PARITY_NONE);
	Uart2.Enable();
	MiYALAB::STM32F446RE::USART_stdioEnable();

	while (1) {
		//printf("Hello stm32\r\n");

		//HAL_Delay(1000);
	}
}

//------------------------------------------------------------------------------
// ハードウェア初期化関数
//------------------------------------------------------------------------------
uint8_t HardwareSetup()
{
	// エラー判定用
	uint8_t Ret = HAL_OK;

	// ハードウェア設定用データ軍
	RCC_OscInitTypeDef OscInitStruct = {0};
	RCC_ClkInitTypeDef ClkInitStruct = {0};
	GPIO_InitTypeDef GpioInitStruct = {0};

	// HALドライバ初期化
	HAL_Init();

	// クロック許可設定
	__HAL_RCC_SYSCFG_CLK_ENABLE();			// システム設定クロック許可
	__HAL_RCC_PWR_CLK_ENABLE();				// PWRクロック許可
	__HAL_RCC_GPIOA_CLK_ENABLE();			// GPIOAクロック許可
	__HAL_RCC_GPIOB_CLK_ENABLE();			// GPIOBクロック許可
	__HAL_RCC_GPIOC_CLK_ENABLE();			// GPIOCクロック許可
	__HAL_RCC_GPIOD_CLK_ENABLE();			// GPIODクロック許可
	__HAL_RCC_GPIOH_CLK_ENABLE();			// GPIOHクロック許可

	// PWRボルテージスケール設定
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);

	// OSC設定
	OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	OscInitStruct.HSEState = RCC_HSE_ON;
	OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
	OscInitStruct.PLL.PLLM = 4;
	OscInitStruct.PLL.PLLN = 180;
	OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	OscInitStruct.PLL.PLLQ = 3;
	OscInitStruct.PLL.PLLR = 2;

	// OSC設定適用
	if (HAL_RCC_OscConfig(&OscInitStruct) != HAL_OK){
		Ret = HAL_ERROR;
	}

	// オーバードライブ許可
	if (HAL_PWREx_EnableOverDrive() != HAL_OK){
		Ret = HAL_ERROR;
	}

	// CLK設定
	ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
	ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	// CLK設定適用
	if (HAL_RCC_ClockConfig(&ClkInitStruct, FLASH_LATENCY_5) != HAL_OK){
		Ret = HAL_ERROR;
	}

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GpioInitStruct.Pin = B1_Pin;
	GpioInitStruct.Mode = GPIO_MODE_IT_FALLING;
	GpioInitStruct.Pull = GPIO_NOPULL;
	HAL_GPIO_Init(B1_GPIO_Port, &GpioInitStruct);

	/*Configure GPIO pin : LD2_Pin */
	GpioInitStruct.Pin = LD2_Pin;
	GpioInitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GpioInitStruct.Pull = GPIO_NOPULL;
	GpioInitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(LD2_GPIO_Port, &GpioInitStruct);

	return Ret;
}

//--------------------------------------------------------------------------------------------
// １文字送信関数(ラッパー関数)
//--------------------------------------------------------------------------------------------
void MiYALAB::STM32F446RE::USART_PutChar(uint8_t C)
{
	Uart2.Transmit(C, 0xff);
}

//--------------------------------------------------------------------------------------------
// エコーバック関数(ラッパー関数)
//--------------------------------------------------------------------------------------------
void MiYALAB::STM32F446RE::USART_EchoBack(uint8_t C)
{
	Uart2.Transmit(C, 0xff);
}

//--------------------------------------------------------------------------------------------
// １文字受信関数(ラッパー関数)
//--------------------------------------------------------------------------------------------
uint8_t MiYALAB::STM32F446RE::USART_GetChar(uint8_t *C)
{
	return Uart2.Receive(C, 0x01);
}

//--------------------------------------------------------------------------------------------
// TIM6 割込み関数（未定義用）
//--------------------------------------------------------------------------------------------
void MiYALAB::STM32F446RE::TIM6_InterruptFunction()
{
	printf("Hello stm32\r\n");
	cntDelay.Add(1);
	HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);

}

void delay(uint32_t setDelay)
{
	cntDelay.Clear();
	while(cntDelay.Read() < setDelay);
}

//------------------------------------------------------------------------------
// end of file
//------------------------------------------------------------------------------
