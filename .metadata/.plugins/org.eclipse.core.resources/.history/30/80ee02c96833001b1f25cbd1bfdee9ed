/*
 * MIT License
 *
 * Copyright (c) 2020 MiYA LAB(K.Miyauchi)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 * File  : Pwm.cpp
 * Author: K.Miyauchi
 *
 * Version : 1.00
 */

//--------------------------
// インクルード
//--------------------------
#include "Encoder.h"

//--------------------------------------------------------------------------------------------
// MiYA LAB OSS
// TIM Encoder Mode スーパークラス　Init関数
// count　= パルス数 / Divide
// return : 0(正常)
//			otherwise(エラー)
//--------------------------------------------------------------------------------------------
uint8_t MiYALAB::STM32F446RE::TIM_EncoderMode::Init(uint16_t Divide)
{
	// ハードウェア設定用データ群
	TIM_Encoder_InitTypeDef Config ={0};
	TIM_MasterConfigTypeDef MasterConfig = {0};

	// TIM設定
	hTim.Init.Prescaler = Divide;
	hTim.Init.CounterMode = TIM_COUNTERMODE_UP;
	hTim.Init.Period = MiYALAB::STM32F446RE::TIM::ENCODER_MAX;
	hTim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	hTim.Init.RepetitionCounter = 0;
	hTim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;

	// TIM設定(エンコーダモード)
	Config.EncoderMode = TIM_ENCODERMODE_TI12;
	Config.IC1Polarity = TIM_ICPOLARITY_RISING;
	Config.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	Config.IC1Prescaler = TIM_ICPSC_DIV1;
	Config.IC1Filter = 0;
	Config.IC2Polarity = TIM_ICPOLARITY_RISING;
	Config.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	Config.IC2Prescaler = TIM_ICPSC_DIV1;
	Config.IC2Filter = 0;

	// TIM設定(エンコーダモード)　適用
	if(HAL_TIM_Encoder_Init(&hTim, &Config) != HAL_OK){
		return HAL_ERROR;
	}

	// TIM マスター設定
	MasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	MasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;

	// TIM マスター設定適用
	if(HAL_TIMEx_MasterConfigSynchronization(&hTim, &MasterConfig) != HAL_OK){
		return HAL_ERROR;
	}

	return HAL_OK;
}


//------------------------------------------------------------------------------
// end of file
//------------------------------------------------------------------------------
/*
 * 2020.12.01 : ファイル作成
 */
